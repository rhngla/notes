
---
title: "R notes"
author: "Rohan Gala"
date: "2024-03-13"
date-modified: "last-modified"
categories: ["R"]
toc: true
number-sections: true
number-depth: 2
highlight-style: github
html-math-method: katex
bibliography: "../refs.bib"
code-fold: true
---

Miscellenous notes on R. 

### Installing R (Macs)

I've had a good experience with [rig](https://github.com/r-lib/rig) on my M3 Mac through `homebrew`. Multiple R versions can be installed, and Rstudio can be directed to use a particular version. 

```bash
rig rstudio 4.3-arm64
```

Use `renv` through Rstudio to manage environments. [This page](https://rstudio.github.io/renv/articles/renv.html) has a good overview of the main commands and functionality.

```R
# Use this to show the paths where package files are installed
paths <- .libPaths()

# One of these paths can be provided directly to install.packages() 
install.packages("NMF", lib = paths[1])
```

### Compiling R packages on Mac

Installing the `GNU Fortran compiler` following [these instructions](https://mac.r-project.org/tools/) offered a straightforward fix for compilation errors for various packages on my M3 Mac. Attempts to use `homebrew` installations of `gcc` and `gfortran` failed for me. 

### Writing functions

Place the file containing function definitions in the working directory. Wse `getwd()` to check and `setwd()` to change the working directory as needed.

```R
# Contents of `funcfile.R`
dummyfunc_a<-function(x){
  y<-x^2
  return(y)
}

dummyfunc_b<-function(x){
  y<-x^3
  return(y)
}
```

Make `dummyfunc_a` and `dummyfunc_b` available in the environment by sourcing the file:

```R
# works in a script or console
source('funcfile.R')
```

### Using debug tools

#### 1. `browser()`

This is a way to put a _breakpoint_ manually anywhere in the code. The console will show `Browse[1]>` and you can inspect the variables at that point in the code. While in the browser mode:

 - `n` steps to next line
 - `c` to continue till next breakpoint
 - `Q` to quits the `browser` mode

#### 2. `debug()` and `undebug()`:

```R
# source the file to make the function available
source('funcfile.R')

# tell the debug the function of interest
debug(dummyfunc)

# run the function - this will open a browser() at the first line of that function
dummyfunc(1)

# turn off the debugger when done
undebug(dummyfunc)
```

The same shortcut keys as for `browser()` work in the `debug()` mode as well.

::: {.callout-important appearance="warning" collapse=false icon=false}
Remember to invoke `source('funcfile.R')` each time you make changes to the function file for `debug()` to work correctly. 
:::

#### 3. `traceback()`:

This is helpful to get a full trace of function calls to that led to an error especially while debugging complex / unfamiliar packages. 


